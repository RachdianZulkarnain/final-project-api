generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int       @id @default(autoincrement())
  firstName              String
  lastName               String
  email                  String    @unique
  password               String?
  imageUrl               String?
  role                   Role      @default(USER)
  provider               Provider  @default(CREDENTIAL)
  isVerified             Boolean   @default(false)
  resetPasswordToken     String?
  resetPasswordTokenUsed Boolean?
  verificationSentAt     DateTime?
  isDeleted              Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  tenants      Tenant?
  reviews      Review[]
  transactions Transaction[]

  @@map("users")
}

enum Role {
  USER
  TENANT
}

enum Provider {
  GOOGLE
  CREDENTIAL
}

model Tenant {
  id         Int      @id @default(autoincrement())
  name       String
  imageUrl   String?
  phone      String?
  bankName   String?
  bankNumber String?
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId     Int        @unique
  user       User       @relation(fields: [userId], references: [id])
  properties Property[]

  @@map("tenants")
}

model Property {
  id          Int      @id @default(autoincrement())
  slug        String
  title       String
  description String
  category    Category
  latitude    Float
  longitude   Float
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenantId   Int
  tenant     Tenant             @relation(fields: [tenantId], references: [id])
  images     PropertyImage[]
  facilities PropertyFacility[]
  rooms      Room[]
  reviews    Review[]
}

enum Status {
  published
  draft
}

enum Category {
  villa
  hotel
  apartment
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PropertyFacility {
  id         Int      @id @default(autoincrement())
  title      String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Room {
  id         Int      @id @default(autoincrement())
  name       String
  stock      Int      @default(1)
  price      Int
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  images       RoomImage[]
  facilities   RoomFacility[]
  seasonal     SeasonalRate[]
  unavailable  RoomNonAvailability[]
  transactions Transaction[]
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  url       String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomFacility {
  id        Int      @id @default(autoincrement())
  title     String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeasonalRate {
  id        Int      @id @default(autoincrement())
  date      DateTime
  price     Int
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomNonAvailability {
  date      DateTime
  roomId    Int
  reason    String?
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([date, roomId])
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  review     String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Transaction {
  id           Int               @id @default(autoincrement())
  uuid         String            @unique @default(uuid())
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  roomId       Int
  room         Room              @relation(fields: [roomId], references: [id])
  status       TransactionStatus
  total        Int
  startDate    DateTime
  endDate      DateTime
  paymentProof String?
  invoiceUrl   String?
  expiredAt    DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum TransactionStatus {
  pending
  paid
  cancelled
}
